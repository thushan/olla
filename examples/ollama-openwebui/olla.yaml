# Olla Configuration for OpenWebUI Integration
# This config connects to external Ollama instances and provides a unified interface for OpenWebUI

server:
  host: "0.0.0.0"
  port: 40114
  read_timeout: 30s
  write_timeout: 0s # for LLMs streaming, leave this as 0s
  shutdown_timeout: 10s
  request_logging: true
  request_limits:
    max_body_size: 52428800  # 50MB
    max_header_size: 524288  # 512KB
  rate_limits:
    global_requests_per_minute: 1000
    per_ip_requests_per_minute: 100
    health_requests_per_minute: 1000
    burst_size: 50
    per_endpoint:
      default_requests_per_minute: 200
    cleanup_interval: 5m
    trust_proxy_headers: false
    trusted_proxy_cidrs: [
      "127.0.0.0/8",
      "10.0.0.0/8",
      "172.16.0.0/12",
      "192.168.0.0/16"
    ]

proxy:
  engine: "sherpa" # Available: sherpa, olla
  connection_timeout: 40s
  response_timeout: 900s
  read_timeout: 300s
  max_retries: 3
  retry_backoff: 500ms
  load_balancer: "priority" # Available: round-robin, least-connections, priority
  stream_buffer_size: 8192

discovery:
  type: "static"
  refresh_interval: 30s
  static:
    endpoints:
      # Add your Ollama instances here
      # Example: Local Ollama instance (if running on host)
      - url: "http://host.docker.internal:11434"
        name: "local-ollama"
        type: "ollama"
        priority: 100
        model_url: "/api/tags"
        health_check_url: "/"
        check_interval: 2s
        check_timeout: 1s
      
      # Example: Remote Ollama instance
      # - url: "http://192.168.1.100:11434"
      #   name: "remote-ollama"
      #   type: "ollama"
      #   priority: 50
      #   model_url: "/api/tags"
      #   health_check_url: "/"
      #   check_interval: 2s
      #   check_timeout: 1s
      
      # Example: Another remote Ollama instance
      # - url: "http://gpu-server:11434"
      #   name: "gpu-ollama"
      #   type: "ollama"
      #   priority: 75
      #   model_url: "/api/tags"
      #   health_check_url: "/"
      #   check_interval: 2s
      #   check_timeout: 1s

  model_discovery:
    enabled: true
    interval: 5m
    timeout: 30s
    concurrent_workers: 5
    retry_attempts: 3
    retry_backoff: 1s

model_registry:
  type: "memory"
  enable_unifier: true
  unification:
    enabled: true
    stale_threshold: 24h  # How long to keep models in memory after last seen
    cleanup_interval: 10m  # How often to check for stale models

logging:
  level: "info"  # debug, info, warn, error
  format: "json"  # json, text
  output: "stdout"  # stdout, file

engineering:
  show_nerdstats: false